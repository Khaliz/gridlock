{"status":"ok","feed":{"url":"https://medium.com/feed/@Khaliz","title":"Stories by Prosper Kalu on Medium","link":"https://medium.com/@Khaliz?source=rss-4095a823e1b1------2","author":"","description":"Stories by Prosper Kalu on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*wHlT1PUHiIKFlbaJwRKWlw.jpeg"},"items":[{"title":"How to Create A Cron Job in Laravel 5.7,","pubDate":"2019-12-06 00:32:22","link":"https://medium.com/@Khaliz/how-to-create-a-cron-job-in-laravel-5-7-2bf5c714b644?source=rss-4095a823e1b1------2","guid":"https://medium.com/p/2bf5c714b644","author":"Prosper Kalu","thumbnail":"https://cdn-images-1.medium.com/max/671/1*2DvCYf6TbNJF8H2az5WvJw.png","description":"\n<p><strong>How to Create A Cron Job in Laravel 5.7, 5.8 (Cronjob to notify users for resubscription before expiration date)</strong>\u2026.</p>\n<p>Web application sometimes may require some tasks to run periodically on the server without supervision.. How do we achieve this\u00a0? To achieve this, a task scheduling system is required such could be for sending promotional emails, optimizing database, creating backups or generating site traffic\u00a0report.</p>\n<p>In this blog post, we would be creating a task scheduling system to notify our subscribers on our platform to repay for subscription before their expiration date.</p>\n<h3><strong>Cron</strong></h3>\n<p>Cron is a time-based task scheduler in Unix/Linux operating systems. It runs shell commands at a pre-specified time period. Cron uses a configuration file called crontab also known as Cron table to manage the task scheduling process.</p>\n<p>Crontab contains all the Cron jobs related to a specific task. Cron jobs are composed of two parts, the Cron expression, and a shell command that needs to be\u00a0run.</p>\n<pre>* * * * * command/to/run1</pre>\n<p>In the Cron expression above (* * * * *), each field is an option for determining the task schedule frequency. These options represent minute, hour, day of the month, month and day of the week in the given order. Asterisk symbol means all possible values. So, the above command will run every\u00a0minute.</p>\n<p>The Cron job below will be executed at 6:20 on 10th of every\u00a0month.</p>\n<pre>20 6 10 * * command/to/run</pre>\n<h3>Laravel Cron\u00a0Job</h3>\n<p>Laravel Cron Job is an inbuilt task manager that gives your applications the ability to execute specific commands like sending a slack notification or removing inactive users at a periodic time. We will be using the latest version of Laravel, which is 5.6 at the time of writing this\u00a0article.</p>\n<p>You need a Linux Operating System to run Cron Jobs. This tutorial also assumes a fair knowledge of PHP and\u00a0Laravel.</p>\n<h3>Creating a new\u00a0Project</h3>\n<p>In this tutorial, we will create a simple laravel application to demonstrate task scheduling. Before we continue, i assume you have basic knowledge of php and laravel as i will be\u00a0quick.</p>\n<pre>composer create-project --prefer-dist laravel/laravel cron</pre>\n<p>Lets make our authentication</p>\n<pre>php artisan make:auth</pre>\n<p>Lets create our\u00a0Tables:</p>\n<p>Users Table by\u00a0default</p>\n<a href=\"https://medium.com/media/5ab61ddf761e5d5747f5bb8d27e1a2e6/href\">https://medium.com/media/5ab61ddf761e5d5747f5bb8d27e1a2e6/href</a><p>SubscriptionTable..</p>\n<a href=\"https://medium.com/media/62fca744107b7df07a01363d21d46952/href\">https://medium.com/media/62fca744107b7df07a01363d21d46952/href</a><p>SubscriptionPayments</p>\n<a href=\"https://medium.com/media/f385d03d565dfb80c43f6309ae2fa2dc/href\">https://medium.com/media/f385d03d565dfb80c43f6309ae2fa2dc/href</a><p>Our models for our Relationship\u00a0..</p>\n<a href=\"https://medium.com/media/6be659b7967774c1858a5683fa3c423c/href\">https://medium.com/media/6be659b7967774c1858a5683fa3c423c/href</a><a href=\"https://medium.com/media/94b107e0320d88aac451343743d5877a/href\">https://medium.com/media/94b107e0320d88aac451343743d5877a/href</a><a href=\"https://medium.com/media/fdf42884ea5b21719d0983ed3a46bd10/href\">https://medium.com/media/fdf42884ea5b21719d0983ed3a46bd10/href</a><pre>php artisan make:command SubscriptionRepayment</pre>\n<p>results to\u00a0this\u2026.</p>\n<pre>&lt;?php</pre>\n<pre>namespace App\\Console\\Commands;<br>use Illuminate\\Console\\Command;</pre>\n<pre>class SubscriptionRepayment extends Command</pre>\n<pre>{</pre>\n<pre>/**</pre>\n<pre>* The name and signature of the console command.</pre>\n<pre>*</pre>\n<pre>* @var string</pre>\n<pre>*/</pre>\n<pre>protected $signature = 'command:name';</pre>\n<pre>/**</pre>\n<pre>* The console command description.</pre>\n<pre>*</pre>\n<pre>* @var string</pre>\n<pre>*/</pre>\n<pre>protected $description = 'Command description';</pre>\n<pre>/**</pre>\n<pre>* Create a new command instance.</pre>\n<pre>*</pre>\n<pre>* @return void</pre>\n<pre>*/</pre>\n<pre>public function __construct()</pre>\n<pre>{</pre>\n<pre>parent::__construct();</pre>\n<pre>}</pre>\n<pre>/**</pre>\n<pre>* Execute the console command.</pre>\n<pre>*</pre>\n<pre>* @return mixed</pre>\n<pre>*/</pre>\n<pre>public function handle()</pre>\n<pre>{</pre>\n<pre>//</pre>\n<pre>}</pre>\n<pre>}</pre>\n<p>In this code, protected $signature = 'command:name' contains the name and signature of command we will\u00a0create</p>\n<p>so lets make ours\u00a0\u2026.</p>\n<p>Replace the words command:name with subscription:repayment. This is what we will call this when running the command to perform the\u00a0task.</p>\n<p>Next to protected $description ='Command description'. This is where you place the actual description of what this command will do. The description will be shown when you run the php artisan\u00a0list.</p>\n<p>Change the description of the command\u00a0to:</p>\n<p>protected $description = 'Notify users for resubscription';</p>\n<p>MORE\u2026\u2026\u2026\u2026\u2026\u2026</p>\n<a href=\"https://medium.com/media/564cbac86ef5e5f3ad6db6194bbac74e/href\">https://medium.com/media/564cbac86ef5e5f3ad6db6194bbac74e/href</a><p>Lets break it\u00a0down\u2026.</p>\n<pre>//get all payment details<br>$userPayments= SubscriptionPayment::with('subscription')-&gt;get();</pre>\n<pre>foreach($userPayments as $payment){</pre>\n<pre>//loop through our payment details and perform my action</pre>\n<pre>//<br>}</pre>\n<pre><br>//finally logs this to the console if successfully</pre>\n<pre>$this-&gt;info('Repayment Notification has been Sent');</pre>\n<p>Now time for the Maths..I want to send a notification to a user 3 days before his expiration, what do i do\u00a0? Subtract 3 days from the expiration, then check if the current day is equal to the value of 3 days before expiration then i send him a notification mail.</p>\n<pre>$expirationDate = $payment-&gt;expiration_date;</pre>\n<pre>//Subtracts 3days from the expiration date<br>$carbon3DaysBeforeExpirationDate = Carbon::parse($expirationDate)-&gt;subDay(3)-&gt;toDateString();</pre>\n<p>Same with\u00a0this\u2026..</p>\n<pre>//Subtracts 2days from the expiration date</pre>\n<pre>$carbon2DaysBeforeExpirationDate = Carbon::parse($expirationDate)-&gt;subDay(2)-&gt;toDateString();</pre>\n<pre>//Subtracts a day from the expiration date</pre>\n<pre>$carbon1DayBeforeExpirationDate = Carbon::parse($expirationDate)-&gt;subDay(1)-&gt;toDateString();</pre>\n<pre>//  if currentDate is 3days or 2 days or a day before the expiration perform the below action</pre>\n<pre>if($currentDate == $carbon3DaysBeforeExpirationDate || $carbon2DaysBeforeExpirationDate || $carbon1DayBeforeExpirationDate){</pre>\n<pre>Mail::to($payment-&gt;user-&gt;email)-&gt;send(new NewPay($data));</pre>\n<pre>}</pre>\n<pre>//the logs this to the console</pre>\n<pre>$this-&gt;info('Repayment Notification has been Sent');</pre>\n<p>So we are done creating our command\u00a0, so lets create our\u00a0mail</p>\n<pre>php artisan make:mail ResubscriptionMail</pre>\n<a href=\"https://medium.com/media/f9040ae026d1abfca89d22ec67a66096/href\">https://medium.com/media/f9040ae026d1abfca89d22ec67a66096/href</a><h4>Registering the\u00a0Command</h4>\n<p>Now that you have created the command, you will need to register it in the\u00a0Kernel.</p>\n<p>Go to <strong>app/Console/Kernel.php</strong></p>\n<p>In this file, we register the command class in the commands property and we schedule commands to be executed at periodic intervals in the schedule method. This is where we handle all the Cron Jobs in\u00a0Laravel.</p>\n<p>Change this file with the contents below. We have simply added our SubscriptionRepayment class to the commands property and schedule it to run every\u00a0day.</p>\n<a href=\"https://medium.com/media/5e01a5e3cc618df45bea6b1077aa5b1d/href\">https://medium.com/media/5e01a5e3cc618df45bea6b1077aa5b1d/href</a><p>Now, if you run the php artisan list command in the terminal, you will see your command has been registered. You will be able to see the command name with the signature and description.</p>\n<p>Let\u2019s highlight some\u00a0things:</p>\n<p>i) Commands\\SubscriptionRepayment::class, refers to subscriptionRepayment class where we handled the\u00a0command</p>\n<p>ii) $schedule-&gt;command('subscription:repayment') is where we define which command needs to be executed and -&gt;daily();</p>\n<p>You can replace -&gt;daily(); with another time interval option from the following list. You can find more about Task Scheduling in <a href=\"https://laravel.com/docs/scheduling\">Laravel Documentation</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/671/1*2DvCYf6TbNJF8H2az5WvJw.png\"></figure><p>Don\u2019t forget to setup mail credentials in the\u00a0.env file and make sure you have details in the users table and other tables in the database. Execute the command itself on the terminal:</p>\n<pre> php artisan subscription:repayment</pre>\n<h3>Starting the Laravel Scheduler</h3>\n<p>Let\u2019s setup the Cron Jobs to run automatically without initiating manually by running the command. To start the Laravel Scheduler\u00a0, we only need to add one Cron job which executes every minute. Go to your terminal, ssh into your server, cd into your project and run this\u00a0command.</p>\n<pre>crontab -e</pre>\n<p>This will open the server Crontab file, paste the code below into the file, save and then\u00a0exit.</p>\n<p>* * * * * cd /path-to-your-project &amp;&amp; php artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</p>\n<p>Do not forget to replace <strong>/path/to/artisan</strong> with the full path to the Artisan command of your Laravel Application.</p>\n<p>One of the most important advantages of Laravel Task Scheduler is that we can focus on creating commands, writing logic and Laravel takes care of the\u00a0rest.</p>\n<p>Next thing we should is to mmm\u00a0\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.</p>\n<p>Nothing actually gotcha\u00a0..</p>\n<p>Thank you for\u00a0reading\u2026</p>\n<p>Credits to <a href=\"https://tutsforweb.com/\">https://tutsforweb.com</a>.. for this swift blog\u00a0post..</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2bf5c714b644\" width=\"1\" height=\"1\">\n","content":"\n<p><strong>How to Create A Cron Job in Laravel 5.7, 5.8 (Cronjob to notify users for resubscription before expiration date)</strong>\u2026.</p>\n<p>Web application sometimes may require some tasks to run periodically on the server without supervision.. How do we achieve this\u00a0? To achieve this, a task scheduling system is required such could be for sending promotional emails, optimizing database, creating backups or generating site traffic\u00a0report.</p>\n<p>In this blog post, we would be creating a task scheduling system to notify our subscribers on our platform to repay for subscription before their expiration date.</p>\n<h3><strong>Cron</strong></h3>\n<p>Cron is a time-based task scheduler in Unix/Linux operating systems. It runs shell commands at a pre-specified time period. Cron uses a configuration file called crontab also known as Cron table to manage the task scheduling process.</p>\n<p>Crontab contains all the Cron jobs related to a specific task. Cron jobs are composed of two parts, the Cron expression, and a shell command that needs to be\u00a0run.</p>\n<pre>* * * * * command/to/run1</pre>\n<p>In the Cron expression above (* * * * *), each field is an option for determining the task schedule frequency. These options represent minute, hour, day of the month, month and day of the week in the given order. Asterisk symbol means all possible values. So, the above command will run every\u00a0minute.</p>\n<p>The Cron job below will be executed at 6:20 on 10th of every\u00a0month.</p>\n<pre>20 6 10 * * command/to/run</pre>\n<h3>Laravel Cron\u00a0Job</h3>\n<p>Laravel Cron Job is an inbuilt task manager that gives your applications the ability to execute specific commands like sending a slack notification or removing inactive users at a periodic time. We will be using the latest version of Laravel, which is 5.6 at the time of writing this\u00a0article.</p>\n<p>You need a Linux Operating System to run Cron Jobs. This tutorial also assumes a fair knowledge of PHP and\u00a0Laravel.</p>\n<h3>Creating a new\u00a0Project</h3>\n<p>In this tutorial, we will create a simple laravel application to demonstrate task scheduling. Before we continue, i assume you have basic knowledge of php and laravel as i will be\u00a0quick.</p>\n<pre>composer create-project --prefer-dist laravel/laravel cron</pre>\n<p>Lets make our authentication</p>\n<pre>php artisan make:auth</pre>\n<p>Lets create our\u00a0Tables:</p>\n<p>Users Table by\u00a0default</p>\n<a href=\"https://medium.com/media/5ab61ddf761e5d5747f5bb8d27e1a2e6/href\">https://medium.com/media/5ab61ddf761e5d5747f5bb8d27e1a2e6/href</a><p>SubscriptionTable..</p>\n<a href=\"https://medium.com/media/62fca744107b7df07a01363d21d46952/href\">https://medium.com/media/62fca744107b7df07a01363d21d46952/href</a><p>SubscriptionPayments</p>\n<a href=\"https://medium.com/media/f385d03d565dfb80c43f6309ae2fa2dc/href\">https://medium.com/media/f385d03d565dfb80c43f6309ae2fa2dc/href</a><p>Our models for our Relationship\u00a0..</p>\n<a href=\"https://medium.com/media/6be659b7967774c1858a5683fa3c423c/href\">https://medium.com/media/6be659b7967774c1858a5683fa3c423c/href</a><a href=\"https://medium.com/media/94b107e0320d88aac451343743d5877a/href\">https://medium.com/media/94b107e0320d88aac451343743d5877a/href</a><a href=\"https://medium.com/media/fdf42884ea5b21719d0983ed3a46bd10/href\">https://medium.com/media/fdf42884ea5b21719d0983ed3a46bd10/href</a><pre>php artisan make:command SubscriptionRepayment</pre>\n<p>results to\u00a0this\u2026.</p>\n<pre>&lt;?php</pre>\n<pre>namespace App\\Console\\Commands;<br>use Illuminate\\Console\\Command;</pre>\n<pre>class SubscriptionRepayment extends Command</pre>\n<pre>{</pre>\n<pre>/**</pre>\n<pre>* The name and signature of the console command.</pre>\n<pre>*</pre>\n<pre>* @var string</pre>\n<pre>*/</pre>\n<pre>protected $signature = 'command:name';</pre>\n<pre>/**</pre>\n<pre>* The console command description.</pre>\n<pre>*</pre>\n<pre>* @var string</pre>\n<pre>*/</pre>\n<pre>protected $description = 'Command description';</pre>\n<pre>/**</pre>\n<pre>* Create a new command instance.</pre>\n<pre>*</pre>\n<pre>* @return void</pre>\n<pre>*/</pre>\n<pre>public function __construct()</pre>\n<pre>{</pre>\n<pre>parent::__construct();</pre>\n<pre>}</pre>\n<pre>/**</pre>\n<pre>* Execute the console command.</pre>\n<pre>*</pre>\n<pre>* @return mixed</pre>\n<pre>*/</pre>\n<pre>public function handle()</pre>\n<pre>{</pre>\n<pre>//</pre>\n<pre>}</pre>\n<pre>}</pre>\n<p>In this code, protected $signature = 'command:name' contains the name and signature of command we will\u00a0create</p>\n<p>so lets make ours\u00a0\u2026.</p>\n<p>Replace the words command:name with subscription:repayment. This is what we will call this when running the command to perform the\u00a0task.</p>\n<p>Next to protected $description ='Command description'. This is where you place the actual description of what this command will do. The description will be shown when you run the php artisan\u00a0list.</p>\n<p>Change the description of the command\u00a0to:</p>\n<p>protected $description = 'Notify users for resubscription';</p>\n<p>MORE\u2026\u2026\u2026\u2026\u2026\u2026</p>\n<a href=\"https://medium.com/media/564cbac86ef5e5f3ad6db6194bbac74e/href\">https://medium.com/media/564cbac86ef5e5f3ad6db6194bbac74e/href</a><p>Lets break it\u00a0down\u2026.</p>\n<pre>//get all payment details<br>$userPayments= SubscriptionPayment::with('subscription')-&gt;get();</pre>\n<pre>foreach($userPayments as $payment){</pre>\n<pre>//loop through our payment details and perform my action</pre>\n<pre>//<br>}</pre>\n<pre><br>//finally logs this to the console if successfully</pre>\n<pre>$this-&gt;info('Repayment Notification has been Sent');</pre>\n<p>Now time for the Maths..I want to send a notification to a user 3 days before his expiration, what do i do\u00a0? Subtract 3 days from the expiration, then check if the current day is equal to the value of 3 days before expiration then i send him a notification mail.</p>\n<pre>$expirationDate = $payment-&gt;expiration_date;</pre>\n<pre>//Subtracts 3days from the expiration date<br>$carbon3DaysBeforeExpirationDate = Carbon::parse($expirationDate)-&gt;subDay(3)-&gt;toDateString();</pre>\n<p>Same with\u00a0this\u2026..</p>\n<pre>//Subtracts 2days from the expiration date</pre>\n<pre>$carbon2DaysBeforeExpirationDate = Carbon::parse($expirationDate)-&gt;subDay(2)-&gt;toDateString();</pre>\n<pre>//Subtracts a day from the expiration date</pre>\n<pre>$carbon1DayBeforeExpirationDate = Carbon::parse($expirationDate)-&gt;subDay(1)-&gt;toDateString();</pre>\n<pre>//  if currentDate is 3days or 2 days or a day before the expiration perform the below action</pre>\n<pre>if($currentDate == $carbon3DaysBeforeExpirationDate || $carbon2DaysBeforeExpirationDate || $carbon1DayBeforeExpirationDate){</pre>\n<pre>Mail::to($payment-&gt;user-&gt;email)-&gt;send(new NewPay($data));</pre>\n<pre>}</pre>\n<pre>//the logs this to the console</pre>\n<pre>$this-&gt;info('Repayment Notification has been Sent');</pre>\n<p>So we are done creating our command\u00a0, so lets create our\u00a0mail</p>\n<pre>php artisan make:mail ResubscriptionMail</pre>\n<a href=\"https://medium.com/media/f9040ae026d1abfca89d22ec67a66096/href\">https://medium.com/media/f9040ae026d1abfca89d22ec67a66096/href</a><h4>Registering the\u00a0Command</h4>\n<p>Now that you have created the command, you will need to register it in the\u00a0Kernel.</p>\n<p>Go to <strong>app/Console/Kernel.php</strong></p>\n<p>In this file, we register the command class in the commands property and we schedule commands to be executed at periodic intervals in the schedule method. This is where we handle all the Cron Jobs in\u00a0Laravel.</p>\n<p>Change this file with the contents below. We have simply added our SubscriptionRepayment class to the commands property and schedule it to run every\u00a0day.</p>\n<a href=\"https://medium.com/media/5e01a5e3cc618df45bea6b1077aa5b1d/href\">https://medium.com/media/5e01a5e3cc618df45bea6b1077aa5b1d/href</a><p>Now, if you run the php artisan list command in the terminal, you will see your command has been registered. You will be able to see the command name with the signature and description.</p>\n<p>Let\u2019s highlight some\u00a0things:</p>\n<p>i) Commands\\SubscriptionRepayment::class, refers to subscriptionRepayment class where we handled the\u00a0command</p>\n<p>ii) $schedule-&gt;command('subscription:repayment') is where we define which command needs to be executed and -&gt;daily();</p>\n<p>You can replace -&gt;daily(); with another time interval option from the following list. You can find more about Task Scheduling in <a href=\"https://laravel.com/docs/scheduling\">Laravel Documentation</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/671/1*2DvCYf6TbNJF8H2az5WvJw.png\"></figure><p>Don\u2019t forget to setup mail credentials in the\u00a0.env file and make sure you have details in the users table and other tables in the database. Execute the command itself on the terminal:</p>\n<pre> php artisan subscription:repayment</pre>\n<h3>Starting the Laravel Scheduler</h3>\n<p>Let\u2019s setup the Cron Jobs to run automatically without initiating manually by running the command. To start the Laravel Scheduler\u00a0, we only need to add one Cron job which executes every minute. Go to your terminal, ssh into your server, cd into your project and run this\u00a0command.</p>\n<pre>crontab -e</pre>\n<p>This will open the server Crontab file, paste the code below into the file, save and then\u00a0exit.</p>\n<p>* * * * * cd /path-to-your-project &amp;&amp; php artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</p>\n<p>Do not forget to replace <strong>/path/to/artisan</strong> with the full path to the Artisan command of your Laravel Application.</p>\n<p>One of the most important advantages of Laravel Task Scheduler is that we can focus on creating commands, writing logic and Laravel takes care of the\u00a0rest.</p>\n<p>Next thing we should is to mmm\u00a0\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.</p>\n<p>Nothing actually gotcha\u00a0..</p>\n<p>Thank you for\u00a0reading\u2026</p>\n<p>Credits to <a href=\"https://tutsforweb.com/\">https://tutsforweb.com</a>.. for this swift blog\u00a0post..</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2bf5c714b644\" width=\"1\" height=\"1\">\n","enclosure":{},"categories":["cron","laravel","php"]},{"title":"MY FIRST WEEK EXPERIENCE BECOMING A FULL STACK WEB DEVELOPER","pubDate":"2018-05-28 10:29:01","link":"https://medium.com/@Khaliz/my-first-week-experience-becoming-a-full-stack-web-developer-b66a4365bc13?source=rss-4095a823e1b1------2","guid":"https://medium.com/p/b66a4365bc13","author":"Prosper Kalu","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b66a4365bc13","description":"\n<p><em>MY FIRST WEEK EXPERIENCE BECOMING A FULL STACK WEB DEVELOPER</em></p>\n<p><em>It was really a great week as I was introduced into the world of web development last week, and I still got 10 weeks to spend here at Innovation Growth Hub (IGHUB) to be a FULL STACK WEB DEVELOPER.</em></p>\n<p><em>It was fun and great starting by learning the basics of Front End Development with HTML, CSS &amp; setting up my web tools ie Sublime text, GIT, XAMP, WAMP\u00a0etc.</em></p>\n<p><em>It is challenging and frustrating when your codes doesn\u2019t work as expected simply because of minor errors like closing the HTML tags which I became very conscious to do. Sometimes when I grumbled like my folks you will hear our mentor -Mr Josh saying \u201cDO IT AGAIN\u201d.I always felt like punching his teeth ***Please don\u2019t tell him what I\u00a0said***.</em></p>\n<p><em>To sum things up, I completed my first project on HTML successfully just like my other folks and am still pushing on waiting for my next project. I learned a valuable lesson too and thanks to challenges I faced as they were the reasons I pressed\u00a0on.</em></p>\n<p><em>Thanks to God, Thanks to IGHUB &amp; Thanks to my readers and hope you will join me at IGHUB\u00a0too.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b66a4365bc13\" width=\"1\" height=\"1\">\n","content":"\n<p><em>MY FIRST WEEK EXPERIENCE BECOMING A FULL STACK WEB DEVELOPER</em></p>\n<p><em>It was really a great week as I was introduced into the world of web development last week, and I still got 10 weeks to spend here at Innovation Growth Hub (IGHUB) to be a FULL STACK WEB DEVELOPER.</em></p>\n<p><em>It was fun and great starting by learning the basics of Front End Development with HTML, CSS &amp; setting up my web tools ie Sublime text, GIT, XAMP, WAMP\u00a0etc.</em></p>\n<p><em>It is challenging and frustrating when your codes doesn\u2019t work as expected simply because of minor errors like closing the HTML tags which I became very conscious to do. Sometimes when I grumbled like my folks you will hear our mentor -Mr Josh saying \u201cDO IT AGAIN\u201d.I always felt like punching his teeth ***Please don\u2019t tell him what I\u00a0said***.</em></p>\n<p><em>To sum things up, I completed my first project on HTML successfully just like my other folks and am still pushing on waiting for my next project. I learned a valuable lesson too and thanks to challenges I faced as they were the reasons I pressed\u00a0on.</em></p>\n<p><em>Thanks to God, Thanks to IGHUB &amp; Thanks to my readers and hope you will join me at IGHUB\u00a0too.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b66a4365bc13\" width=\"1\" height=\"1\">\n","enclosure":{},"categories":["web-development"]}]}